🍄🍄 ( "life game" ) ;

🍄🍄 ( "library import" ) ;
🐽🐽🐽 ( ".nylang/lib/__array__.nyl" ) ;
🐽🐽🐽 ( ".nylang/lib/__rand__.nyl" ) ;

🍄🍄 ( "make empty 2 dimentional array" ) ;
🍙 make_array = 🏨 ( arr, size, value ) {
  🌸 (
    🏨 ( ) {
      🍙 array_of_array = [ ] ;
      🌸 (
        🏨 ( ) {
          🍙 array_of_array = 🥌 ( array_of_array, value ) ;
        },
        size
      ) ;

      🍙 arr = 🥌 ( arr, array_of_array ) ;
    },
    size
  ) ;

  🐶 ( 📏 ( arr ) != size ) {
    ❌ ( "array size is incorrect" ) ;
  }

  🍙 __test_ar_ar = arr [ 0 ] ;
  🐶 ( __test_ar_ar [ 0 ] != value ) {
    ❌ ( "expected value is incorrect" ) ;
  }
  💨 arr ;
} ;

🍄🍄 ( "put random value" ) ;
🍙 put_random_value = 🏨 ( arr, times ) {
  🌸 (
    🏨 ( ) {
        🍙 i = __rand__random_num_zero_to_specified_number ( 📏 ( arr ) ) ;
        🍙 j = __rand__random_num_zero_to_specified_number ( 📏 ( arr ) ) ;
        🍙 ar_ar = arr [ i ] ;
        🍙 arr = __array__assign ( arr , i , __array__assign ( ar_ar , j , __rand__random_number ( ) % 2 ) ) ;
    },
    times
  ) ;

  💨 arr ;
} ;

🍄🍄 ( "literally display array" ) ;
🍙 display_array = 🏨 ( arr ) {
  🍙 i = 0 ; 🍙 j = 0 ;
  🍙 arr_len = 📏 ( arr ) ;
  🍙 str = "" ;

  🌸 (
    🏨 ( ) {
      🍙 j = 0 ; 
      🌸 (
        🏨 ( ) {
          🍙 _ar = arr [ i ] ;
          🐶 ( _ar [ j ] ) {
            🍙 str = 🥌 ( str, "o " ) ;
          } 😱 {
            🍙 str = 🥌 ( str, "- " ) ;
          } ;
          🍙 j = j + 1 ;
        },
        arr_len
      ) ;
      🍙 str = 🥌 ( str, "\n" ) ;
      🍙 i = i + 1 ;
    },
    arr_len
  ) ;

  🎤🎶 ( str ) ;
} ;

🍙 main = 🏨 ( ) {

  🥚 ( ) ;
  🎤🎶 ( "-! preparing array...", 255, 0, 0, 👎 ) ;

  🍙 array_size = 20 ;
  🍙 array = put_random_value ( make_array ( [ ], array_size, 👎 ), array_size * array_size ) ;

  🍙 i = 0 ; 🍙 j = 0 ;
  🍙 array_len = 📏 ( array ) ;

  🌸 (
    🏨 ( ) {
      🍙 j = 0 ; 
      🌸 (
        🏨 ( ) {
          display_array ( array ) ;
          🍙 ar_ar = array [ i ] ;
          🍙 ar_ar = __array__assign ( ar_ar , j , 👎 ) ;
          🍙 array = __array__assign ( array , i , ar_ar ) ;
          🥚 ( ) ;
          🍙 j = j + 1 ; 
        },
        array_len
      ) ;
      🍙 i = i + 1 ; 
    },
    array_len
  ) ;
} ;

main ( ) ;